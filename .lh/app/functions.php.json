{
    "sourceFile": "app/functions.php",
    "activeCommit": 0,
    "commits": [
        {
            "activePatchIndex": 0,
            "patches": [
                {
                    "date": 1693837733990,
                    "content": "Index: \n===================================================================\n--- \n+++ \n"
                }
            ],
            "date": 1693837733989,
            "name": "Commit-0",
            "content": "<?php \r\nuse Dompdf\\Dompdf;\r\nuse PHPMailer\\PHPMailer\\PHPMailer;\r\n\r\n\r\nfunction get_view($view_name) {\r\n  $view = VIEWS.$view_name.'View.php';\r\n  if(!is_file($view)) {\r\n    die('La vista no existe');\r\n  }\r\n\r\n  // Existe la vista\r\n  require_once $view;\r\n}\r\n\r\n// Cotización\r\n// new_quote []\r\n/**\r\n * number\r\n * name\r\n * company\r\n * email\r\n * items []\r\n * subtotal\r\n * taxes\r\n * shipping\r\n * total\r\n */\r\n\r\n/**\r\n * item\r\n * id\r\n * concept\r\n * type\r\n * quantity\r\n * price\r\n * taxes\r\n * total\r\n */\r\n\r\n/**\r\n * get_quote()\r\n * get_items()\r\n * get_item($id)\r\n * add_item($item)\r\n * delete_item($id)\r\n * delete_items()\r\n * restart_quote()\r\n*/\r\n\r\nfunction get_quote() {\r\n  if(!isset($_SESSION['new_quote'])) {\r\n    return $_SESSION['new_quote'] =\r\n    [\r\n      'number'   => rand(111111, 999999),\r\n      'name'     => '',\r\n      'company'  => '',\r\n      'email'    => '',\r\n      'items'    => [],\r\n      'subtotal' => 0,\r\n      'taxes'    => 0,\r\n      'shipping' => 0,\r\n      'total'    => 0\r\n    ];\r\n  }\r\n\r\n  // recalcular todos los totales\r\n  recalculate_quote();\r\n\r\n  return $_SESSION['new_quote'];\r\n}\r\n\r\nfunction set_client($client) {\r\n  $_SESSION['new_quote']['name']    = trim($client['nombre']);\r\n  $_SESSION['new_quote']['company'] = trim($client['empresa']);\r\n  $_SESSION['new_quote']['email']   = trim($client['email']);\r\n  return true;\r\n}\r\n\r\nfunction recalculate_quote() {\r\n  $items    = [];\r\n  $subtotal = 0;\r\n  $taxes    = 0;\r\n  $shipping = SHIPPING;\r\n  $total    = 0;\r\n\r\n  if(!isset($_SESSION['new_quote'])) {\r\n    return false;\r\n  }\r\n\r\n  // Validar items\r\n  $items = $_SESSION['new_quote']['items'];\r\n\r\n  // Si la lista de items está vacía no es necesario calcular nada\r\n  if(!empty($items)) {\r\n    foreach ($items as $item) {\r\n      $subtotal += $item['total'];\r\n      $taxes    += $item['taxes'];\r\n    }\r\n  }\r\n\r\n\r\n  $total    = $subtotal + $taxes + $shipping;\r\n\r\n  $_SESSION['new_quote']['subtotal'] = $subtotal;\r\n  $_SESSION['new_quote']['taxes']    = $taxes;\r\n  $_SESSION['new_quote']['shipping'] = $shipping;\r\n  $_SESSION['new_quote']['total']    = $total;\r\n  return true;\r\n}\r\n\r\nfunction restart_quote() {\r\n  $_SESSION['new_quote'] =\r\n  [\r\n    'number'   => rand(111111, 999999),\r\n    'name'     => '',\r\n    'company'  => '',\r\n    'email'    => '',\r\n    'items'    => [],\r\n    'subtotal' => 0,\r\n    'taxes'    => 0,\r\n    'shipping' => 0,\r\n    'total'    => 0\r\n  ];\r\n\r\n  return true;\r\n}\r\n\r\nfunction get_items() {\r\n  $items = [];\r\n\r\n  // Si no existe la cotización y obviamente está vacio el array\r\n  if(!isset($_SESSION['new_quote']['items'])) {\r\n    return $items;\r\n  }\r\n\r\n  // La cotización existe, se asigna el valor\r\n  $items = $_SESSION['new_quote']['items'];\r\n  return $items;\r\n}\r\n\r\nfunction get_item($id) {\r\n  $items = get_items();\r\n\r\n  // Si no hay items\r\n  if(empty($items)) {\r\n    return false;\r\n  }\r\n\r\n  // Si hay items iteramos\r\n  foreach ($items as $item) {\r\n    // Validar si existe con el mismo id pasado\r\n    if($item['id'] === $id) {\r\n      return $item;\r\n    }\r\n  }\r\n\r\n  // No hubo un match o resultados\r\n  return false;\r\n}\r\n\r\nfunction delete_items() {\r\n  $_SESSION['new_quote']['items'] = [];\r\n\r\n  recalculate_quote();\r\n\r\n  return true;\r\n}\r\n\r\nfunction delete_item($id) {\r\n  $items = get_items();\r\n\r\n  // Si no hay items\r\n  if(empty($items)) {\r\n    return false;\r\n  }\r\n\r\n  // Si hay items iteramos\r\n  foreach ($items as $i => $item) {\r\n    // Validar si existe con el mismo id pasado\r\n    if($item['id'] === $id) {\r\n      unset($_SESSION['new_quote']['items'][$i]);\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // No hubo un match o resultados\r\n  return false;\r\n}\r\n\r\nfunction add_item($item) {\r\n  $items = get_items();\r\n\r\n  // Si existe el id ya en nuestros items\r\n  // podemos actualizar la información en lugar de agregarlo\r\n  if(get_item($item['id']) !== false) {\r\n    foreach ($items as $i => $e_item) {\r\n      if($item['id'] === $e_item['id']) {\r\n        $_SESSION['new_quote']['items'][$i] = $item;\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  // No existe en la lista, se agrega simplemente\r\n  $_SESSION['new_quote']['items'][] = $item;\r\n  return true;\r\n}\r\n\r\n/**\r\n200 OK\r\n201 Created\r\n300 Multiple Choices\r\n301 Moved Permanently\r\n302 Found\r\n304 Not Modified\r\n307 Temporary Redirect\r\n400 Bad Request\r\n401 Unauthorized\r\n403 Forbidden\r\n404 Not Found\r\n410 Gone\r\n500 Internal Server Error\r\n501 Not Implemented\r\n503 Service Unavailable\r\n550 Permission denied\r\n*/\r\nfunction json_build($status = 200, $data = null, $msg = '') {\r\n  if(empty($msg) || $msg == '') {\r\n    switch ($status) {\r\n      case 200:\r\n        $msg = 'OK';\r\n        break;\r\n      case 201:\r\n        $msg = 'Created';\r\n        break;\r\n      case 400:\r\n        $msg = 'Invalid request';\r\n        break;\r\n      case 403:\r\n        $msg = 'Access denied';\r\n        break;\r\n      case 404:\r\n        $msg = 'Not found';\r\n        break;\r\n      case 500:\r\n        $msg = 'Internal Server Error';\r\n        break;\r\n      case 550:\r\n        $msg = 'Permission denied';\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  }\r\n\r\n  $json =\r\n  [\r\n    'status' => $status,\r\n    'data'   => $data,\r\n    'msg'    => $msg\r\n  ];\r\n\r\n  return json_encode($json);\r\n}\r\n\r\nfunction json_output($json) {\r\n  header('Access-Control-Allow-Origin: *');\r\n  header('Content-Type: application/json;charset=utf-8');\r\n\r\n  if(is_array($json)){\r\n    $json = json_encode($json);\r\n  }\r\n\r\n  echo $json;\r\n\r\n  exit();\r\n}\r\n\r\nfunction get_module($view, $data = []) {\r\n  $view = $view.'.php';\r\n  if(!is_file($view)) {\r\n    return false;\r\n  }\r\n\r\n  $d = $data = json_decode(json_encode($data)); // conversión a objeto\r\n\r\n  ob_start();\r\n  require_once $view;\r\n  $output = ob_get_clean();\r\n\r\n  return $output;\r\n}\r\n\r\nfunction hook_mi_funcion() {\r\n  echo 'Estoy siendo ejecutada en ajax.php de forma automática';\r\n}\r\n\r\nfunction hook_get_quote_res() {\r\n  \r\n  // Vamos a cargar la cotización\r\n  $quote = get_quote();\r\n  $html  = get_module(MODULES.'quote_table', $quote);\r\n\r\n  json_output(json_build(200, ['quote' => $quote, 'html' => $html]));\r\n}\r\n\r\n// Agregar concepto\r\nfunction hook_add_to_quote() {\r\n  // Validar\r\n  if(!isset($_POST['concepto'], $_POST['tipo'], $_POST['precio_unitario'], $_POST['cantidad'])) {\r\n    json_output(json_build(403, null, 'Parametros incompletos.'));\r\n  }\r\n\r\n  $concept  = trim($_POST['concepto']);\r\n  $type     = trim($_POST['tipo']);\r\n  $price    = (float) str_replace([',','$'], '', $_POST['precio_unitario']);\r\n  $quantity = (int) trim($_POST['cantidad']);\r\n  $subtotal = (float) $price * $quantity;\r\n  $taxes    = (float) $subtotal * (TAXES_RATE / 100);\r\n\r\n  $item = \r\n  [\r\n    'id'       => rand(1111, 9999),\r\n    'concept'  => $concept,\r\n    'type'     => $type,\r\n    'quantity' => $quantity,\r\n    'price'    => $price,\r\n    'taxes'    => $taxes,\r\n    'total'    => $subtotal\r\n  ];\r\n\r\n  if(!add_item($item)) {\r\n    json_output(json_build(400, null, 'Hubo un problema al guardar el concepto en la cotización.'));\r\n  }\r\n\r\n  json_output(json_build(201, get_item($item['id']), 'Concepto agregado con éxito.'));\r\n}\r\n\r\n// Reinciar la cotización\r\nfunction hook_restart_quote() {\r\n  $items = get_items();\r\n\r\n  if(empty($items)) {\r\n    json_output(json_build(400, null, 'No es necesario reiniciar la cotización, no hay conceptos en ella.'));\r\n  }\r\n\r\n  if(!restart_quote()) {\r\n    json_output(json_build(400, null, 'Hubo un problema al reiniciar la cotización.'));\r\n  }\r\n\r\n  json_output(json_build(200, get_quote(), 'La cotización se ha reiniciado con éxito.'));\r\n}\r\n\r\n// Borrar un concepto de la cotización\r\nfunction hook_delete_concept() {\r\n  if(!isset($_POST['id'])) {\r\n    json_output(json_build(403, null, 'Parametros incompletos.'));\r\n  }\r\n\r\n  if(!delete_item((int) $_POST['id'])) {\r\n    json_output(json_build(400, null, 'Hubo un problema al borrar el concepto.'));\r\n  }\r\n\r\n  json_output(json_build(200, get_quote(), 'Concepto borrado con éxito.'));\r\n}\r\n\r\n// Cargar un concepto para editar\r\nfunction hook_edit_concept() {\r\n  if(!isset($_POST['id'])) {\r\n    json_output(json_build(403, null, 'Parametros incompletos.'));\r\n  }\r\n\r\n  if(!$item = get_item((int) $_POST['id'])) {\r\n    json_output(json_build(400, null, 'Hubo un problema al cargar el concepto.'));\r\n  }\r\n\r\n  json_output(json_build(200, $item, 'Concepto cargado con éxito.'));\r\n}\r\n\r\n// Guardar los cambios de un concepto\r\nfunction hook_save_concept() {\r\n  // Validar\r\n  if(!isset($_POST['id_concepto'], $_POST['concepto'], $_POST['tipo'], $_POST['precio_unitario'], $_POST['cantidad'])) {\r\n    json_output(json_build(403, null, 'Parametros incompletos.'));\r\n  }\r\n\r\n  $id       = (int) $_POST['id_concepto'];\r\n  $concept  = trim($_POST['concepto']);\r\n  $type     = trim($_POST['tipo']);\r\n  $price    = (float) str_replace([',','$'], '', $_POST['precio_unitario']);\r\n  $quantity = (int) trim($_POST['cantidad']);\r\n  $subtotal = (float) $price * $quantity;\r\n  $taxes    = (float) $subtotal * (TAXES_RATE / 100);\r\n\r\n  $item = \r\n  [\r\n    'id'       => $id,\r\n    'concept'  => $concept,\r\n    'type'     => $type,\r\n    'quantity' => $quantity,\r\n    'price'    => $price,\r\n    'taxes'    => $taxes,\r\n    'total'    => $subtotal\r\n  ];\r\n\r\n  if(!add_item($item)) {\r\n    json_output(json_build(400, null, 'Hubo un problema al guardar los cambios del concepto.'));\r\n  }\r\n\r\n  json_output(json_build(200, get_item($id), 'Cambios guardados con éxito.'));\r\n}\r\n\r\n// Generar un pdf\r\nfunction generate_pdf($filename = null, $html, $save_to_file = true) {\r\n  // Nombre del archivo\r\n  $filename = $filename === null ? time().'.pdf' : $filename.'.pdf';\r\n\r\n  // Instancia de la clase\r\n  $pdf = new Dompdf();\r\n\r\n  // Formato\r\n  $pdf->setPaper('A4');\r\n\r\n  // Contenido\r\n  $pdf->loadHtml($html);\r\n  $pdf->render();\r\n\r\n  if($save_to_file) {\r\n    $output = $pdf->output();\r\n    file_put_contents($filename, $output);\r\n    return true;\r\n  }\r\n\r\n  $pdf->stream($filename);\r\n  return true;\r\n}\r\n\r\n// Crear el pdf de la cotización\r\nfunction hook_generate_quote() {\r\n  // Validar\r\n  if(!isset($_POST['nombre'], $_POST['empresa'], $_POST['email'])) {\r\n    json_output(json_build(403, null, 'Parametros incompletos.'));\r\n  }\r\n\r\n  \r\n  \r\n  // Guardar información del cliente\r\n  $client = \r\n  [\r\n    'nombre'  => $_POST['nombre'],\r\n    'empresa' => $_POST['empresa'],\r\n    'email'   => $_POST['email']\r\n  ];\r\n  set_client($client);\r\n\r\n  // Cargar cotización\r\n  $quote    = get_quote();\r\n\r\n  if(empty($quote['items'])) {\r\n    json_output(json_build(400, null, 'No hay conceptos en la cotización.'));\r\n  }\r\n\r\n  $module       = MODULES.'pdf_template';\r\n  $html         = get_module($module, $quote);\r\n  $filename     = 'coty_'.$quote['number'];\r\n  $download     = sprintf(URL.'pdf.php?number=%s', $quote['number']); // pdf.php?number=123456\r\n  $quote['url'] = $download;\r\n\r\n  // Generar pdf y guardarlo en servidor\r\n  if(!generate_pdf(UPLOADS.$filename, $html)) {\r\n    json_output(json_build(400, null, 'Hubo un problema al generar la cotización.'));\r\n  }\r\n\r\n  json_output(json_build(200, $quote, 'Cotización generada con éxito.'));\r\n}\r\n\r\n// Cargar todas las cotizaciones\r\nfunction get_all_quotes() {\r\n  return $quotes = glob(UPLOADS.'coty_*.pdf');\r\n}\r\n\r\n// Redirección\r\nfunction redirect($route) {\r\n  header(sprintf('Location: %s', $route));\r\n  exit;\r\n}\r\n\r\n// Enviar nuevo correo electrónico\r\n// function send_mail($data) {\r\n//   $mail          = new PHPMailer();\r\n//   $mail->setFrom(APP_EMAIL, APP_NAME); // remitente\r\n//   $mail->addAddress($data['email'], empty($data['name']) ? null : $data['name']); // destinatario\r\n//   $mail->Subject = $data['subject']; // asunto\r\n//   $mail->msgHTML(get_module(MODULES.'email_template', $data)); // plantilla\r\n//   $mail->AltBody = $data['alt_text']; // alternativo\r\n//   $mail->CharSet = 'UTF-8'; // chartset\r\n\r\n//   // Adjuntos\r\n//   if(!empty($data['attachments'])) {\r\n//     foreach ($data['attachments'] as $file) {\r\n//       $mail->addAttachment($file);\r\n//     }\r\n//   }\r\n\r\n//   if(!$mail->send()) {\r\n//     return false;\r\n//   }\r\n\r\n//   return true;\r\n// }\r\n\r\nfunction hook_send_quote() {\r\n  if(!isset($_POST['number'])) {\r\n    json_output(json_build(403, null, 'Parametros incompletos.'));\r\n  }\r\n  \r\n  // Validar correo\r\n  $number = $_POST['number'];\r\n  $quote  = get_quote();\r\n \r\n\r\n  // Validar la existencia de la cotización\r\n  $file = sprintf(UPLOADS.'coty_%s.pdf', $number);\r\n  if(!is_file($file)) {\r\n    json_output(json_build(400, null, 'La cotización no existe.'));\r\n  }\r\n  \r\n  // Guardar información para el correo\r\n  $body = '<h1>Nueva cotización</h1><br><p>Hola <b>%s</b>, has recibido una cotización con folio <b>%s</b> por parte de <b>%s</b>, se encuentra adjunta a este correo.</p>';\r\n  $body = sprintf($body, $quote['name'], $number, APP_NAME);\r\n \r\n\r\n\r\n}"
        }
    ]
}